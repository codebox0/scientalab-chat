name: Build and Deploy Scienta Lab Chat

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: scientalab-backend
  FRONTEND_IMAGE: scientalab-frontend

jobs:
  # ===== BUILD JOBS (PARALLEL) =====
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx with retry
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
        continue-on-error: true

      - name: Configure Docker daemon with mirrors
        run: |
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "registry-mirrors": [
              "https://mirror.gcr.io",
              "https://dockerhub.azk8s.cn"
            ],
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10
          }
          EOF
          sudo systemctl restart docker
          sleep 5

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build & push backend with retry
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          TAG_ARGS=""
          for tag in $TAGS; do
            TAG_ARGS="$TAG_ARGS --tag $tag"
          done

          # Retry logic with 3 attempts
          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; do
            echo "üîÑ Build attempt $ATTEMPT of $MAX_ATTEMPTS..."

            if docker buildx build \
              --file ./chat-app/backend/Dockerfile \
              --platform linux/amd64 \
              $TAG_ARGS \
              --push \
              --progress plain \
              . ; then
              SUCCESS=true
              echo "‚úÖ Build succeeded on attempt $ATTEMPT"
            else
              echo "‚ùå Build failed on attempt $ATTEMPT"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              fi
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "‚ùå Build failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx with retry
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
        continue-on-error: true

      - name: Configure Docker daemon with mirrors
        run: |
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "registry-mirrors": [
              "https://mirror.gcr.io",
              "https://dockerhub.azk8s.cn"
            ],
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10
          }
          EOF
          sudo systemctl restart docker
          sleep 5

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build & push frontend with retry
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          TAG_ARGS=""
          for tag in $TAGS; do
            TAG_ARGS="$TAG_ARGS --tag $tag"
          done

          # Retry logic with 3 attempts
          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; do
            echo "üîÑ Build attempt $ATTEMPT of $MAX_ATTEMPTS..."

            if docker buildx build \
              --file ./chat-app/frontend/Dockerfile \
              --platform linux/amd64 \
              --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
              --build-arg NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }} \
              $TAG_ARGS \
              --push \
              --progress plain \
              . ; then
              SUCCESS=true
              echo "‚úÖ Build succeeded on attempt $ATTEMPT"
            else
              echo "‚ùå Build failed on attempt $ATTEMPT"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              fi
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "‚ùå Build failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

  # ===== DEPLOY JOB (AFTER ALL BUILDS) =====
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy deployment files
        run: |
          mkdir -p deploy
          cp docker-compose.yml deploy/
          cp scripts/deploy-server.sh deploy/
          chmod +x deploy/deploy-server.sh
          echo "‚úÖ Deployment files copied"

      - name: Verify deployment files
        run: |
          echo "=== Starting file verification ==="
          echo "Current working directory: $(pwd)"

          echo "\n=== Verifying docker-compose.yml ==="
          if [ ! -f "deploy/docker-compose.yml" ]; then
            echo "‚ùå Error: docker-compose.yml not found"
            echo "Expected path: deploy/docker-compose.yml"
            exit 1
          else
            echo "‚úÖ docker-compose.yml found"
          fi

          echo "\n=== Verifying deploy script ==="
          if [ ! -f "deploy/deploy-server.sh" ]; then
            echo "‚ùå Error: deploy-server.sh not found"
            echo "Expected path: deploy/deploy-server.sh"
            exit 1
          else
            echo "‚úÖ deploy-server.sh found"
          fi

          echo "\n=== All files verified successfully! ==="

      - name: Deploy to server
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BIOMCP_URL: ${{ secrets.BIOMCP_URL }}
          BIO_MCP_SSE_PATH: ${{ secrets.BIO_MCP_SSE_PATH }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}
        run: |
          echo "üöÄ Starting Scienta Lab Chat deployment..."
          echo "üîç Environment check:"
          echo "  - SSH_KEY: ${SSH_KEY:+SET (${#SSH_KEY} chars)}"
          echo "  - SSH_HOST: ${SSH_HOST:+SET ('$SSH_HOST')}"
          echo "  - SSH_USERNAME: ${SSH_USERNAME:+SET ('$SSH_USERNAME')}"
          echo ""

          # Setup SSH key
          echo "üîë Setting up SSH key..."
          echo "$SSH_KEY" > deploy_key
          chmod 600 deploy_key

          # Set up SSH
          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          # Create remote deployment directory
          echo "üìÅ Creating remote deployment directory..."
          ssh -i deploy_key -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "mkdir -p ~/scientalab-deploy"

          # Copy deployment files to server
          echo "üì§ Copying deployment files to server..."
          scp -i deploy_key -r deploy/* $SSH_USERNAME@$SSH_HOST:~/scientalab-deploy/

          # Execute secure deployment script on server
          echo "üöÄ Executing secure deployment script on server..."
          ssh -i deploy_key $SSH_USERNAME@$SSH_HOST "cd ~/scientalab-deploy && GH_USERNAME='$GH_USERNAME' OPENAI_API_KEY='$OPENAI_API_KEY' BIOMCP_URL='$BIOMCP_URL' BIO_MCP_SSE_PATH='$BIO_MCP_SSE_PATH' GHCR_PAT='$GHCR_PAT' ./deploy-server.sh"

          echo "‚úÖ Deployment completed successfully!"
          echo "Frontend: https://scientalab.coulibalymamadou.com"
          echo "API: https://api.scientalab.coulibalymamadou.com"

          # Cleanup SSH key
          rm -f deploy_key
